/*
 * generated by Xtext
 */
package org.xtext.example.mydsl.scoping;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.eclipse.xtext.scoping.impl.SimpleScope;
import org.xtext.example.mydsl.services.WebAppDSLGrammarAccess.VariableUseElements;
import org.xtext.example.mydsl.webAppDSL.Expression;
import org.xtext.example.mydsl.webAppDSL.FunctionValue;
import org.xtext.example.mydsl.webAppDSL.VariableDeclaration;
import org.xtext.example.mydsl.webAppDSL.VariableUse;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#scoping
 * on how and when to use it 
 *
 */
public class WebAppDSLScopeProvider extends AbstractDeclarativeScopeProvider {
	
	
	private EObject getMemberExpressionLeftSideComponentBlock(EObject left) {
		EObject scopeProviderObj = null;
		
		int cnt = 0;
		//System.out.println("-. " + left.eClass().getName());
		Iterator<EObject> itr = left.eAllContents();
		while (itr.hasNext()) {
			EObject temp = itr.next();
			//System.out.println(cnt + ". " + temp.eClass().getName());
			cnt++;
			if (temp.eClass().getName() == "ComponentValue") {
				scopeProviderObj = temp;
				break;
			}
			if (temp.eClass().getName() == "VariableUseASD") {
				VariableUse temp2;
				temp2 = (VariableUse) temp;
				return getMemberExpressionLeftSideComponentBlock(temp2.getRef());
			}
		}
		
		return scopeProviderObj;
	}
	
	
	
	//Used to find the scope of the leftmost variable in the member chain
	//Eg var1.member2.fn(member1)
	//Here member1 needs to have the scope of var1 even if fn has the scope of member2
	private EObject getLeftmostScope(EObject left) {
		EObject scopeProviderObj = left;
		EObject temp = left.eContainer();
		System.out.println("Looking for leftmost scope, found a " + temp.eClass().getName());
		if (temp.eClass().getName() != "ComponentValue") {
			return getLeftmostScope(temp);
		}
		
		return scopeProviderObj;
	}

	
	public EObject getMembersOriginalContext(EObject obj) {
		EObject temp = obj;
		EObject scopeProvider = null;
		boolean isMember = false;
		while (temp.eContainer() != null) {
			temp = temp.eContainer();
			System.out.println(temp.eClass().getName());
			if (temp.eClass().getName() == "Member") {
				//scopeProvider = temp.eContainer();
				isMember = true;
			}
			else if (temp.eClass().getName() == "ComponentValue") {
				if (isMember) {
					scopeProvider = temp;
				}
			}
			else if (temp.eClass().getName() == "VariableUse") {
				if (temp.eContainer().eClass().getName() == "Member") {
					//temp = ((VariableUse) temp).getRef();
					
				}
			}
			else if (temp.eClass().getName() == "VariableDeclaration") {
				System.out.println("-" + ((VariableDeclaration) temp).getName());
			}
		}
		return scopeProvider;
	}
	
	public IScope scope_VariableUse_ref(VariableUse ctx, EReference ref) {
		
		//If the variableuse is a member of another variableUse the scope needs to be changed to the scope of that other variableUse
		if (ctx.eContainer().eClass().getName() == "Member") {
			EObject scopeProviderObj = ((VariableUse) ctx.eContainer().eContainer()).getRef().getValue();
			
			if (scopeProviderObj == null) {
				
				System.out.println("MemberScope null-reference");
				return IScope.NULLSCOPE;
			}
			else {
				return Scopes.scopeFor(scopeProviderObj.eContents());
			}
		}
		//In other cases the scope is set to default
		else {
			//In normal cases augmentedScope will be null resulting in standard declarative scoping provided by xtext
			EObject scopeProviderObj = null;
			EObject temp = ctx.eContainer();
			IScope augmentedScope = null;
			
			//If however the variableUse has a memberScope and is not a member, the scope has to be created manually
			
			//Example:
			// myComponent.memberFn(myVar);
			// Here myVar is a child of memberFn, but the scope of memberFn has already been set to the value of myComponent.
			// myVar will inherit the scope of memberFn which is wrong. Therefore the scope of the variableUse myVar needs to be set manually
			
			boolean isChildOfMember = false;
			
			while (temp != null) {
				if (temp.eClass().getName() == "Member") {
					//If the variableUse has a parent that is a member but is not a member itself, the scope must be changed back to default
					isChildOfMember = true;
				}
				else if (temp.eClass().getName() == "VariableDeclaration") {
					if (isChildOfMember) {
						scopeProviderObj = ((VariableDeclaration) temp).getValue();
						
						System.out.println(((VariableDeclaration) scopeProviderObj.eContainer()).getName() +
								" size= " + scopeProviderObj.eContents().size());
						
						//Variables inside a functionValue are further nested in a functionBlock
						if (scopeProviderObj.eClass().getName() == "FunctionValue") {
							System.out.println("- this is a functionValue");
							scopeProviderObj = ((FunctionValue) scopeProviderObj).getFunctionBlock();
						}
						
						//The new scope will be the sum of the scopes of all values in from variableDeclarations found in the ancestors
						//(This should set the scope back to what xtext would give the variableUse by default)
						if (augmentedScope == null) {
							 augmentedScope = Scopes.scopeFor(scopeProviderObj.eContents());
						}
						else {
							augmentedScope = Scopes.scopeFor(scopeProviderObj.eContents(), augmentedScope);
						}
					}
				}
				temp = temp.eContainer();
			}
			return augmentedScope;
			
			/*
			if (scopeProviderObj != null) {
				System.out.println("-" + ((VariableDeclaration) scopeProviderObj.eContainer()).getName());
				return Scopes.scopeFor(scopeProviderObj.eContents());
			}
			else {
				return null;
			}*/
			
			/*
			EObject temp;
			if ((temp = getMembersOriginalContext(ctx)) != null) {
				System.out.println("Should change the scope to " + temp.eClass().getName());
				return Scopes.scopeFor(temp.eContents());
				//return Scopes.scopeFor(temp.eContainer().eContents());
			}
			else {
				
				System.out.println("Scope ok ");
			}
			
			*/
			
			/*EObject temp = ctx.eContainer();
			
			while (temp.eContainer() != null) {
				temp = ctx.eContainer();
			}
			
			Iterator<EObject> itr = (Iterator<EObject>) EcoreUtil2.getAllContentsOfType(temp, ctx.getClass()).iterator();
			
			
			while (itr.hasNext()) {
				System.out.println("asd" + itr.next().toString());
			}*/
			
			
			//System.out.println("Default scope");
			//return null;//Scopes.scopeFor(ctx.eContainer().eContainer().eContents());
		}
		
	}
	/*
	public IScope scope_VariableDeclaration(VariableDeclaration ctx, EReference ref) {
		if (ctx.getRef() != null) {
			ctx.eContainer().eContents().remove(ctx);
			ctx.getRef().eContents().add(ctx);
			ctx.setRef(null);
			System.out.println("with decl");
			//return scope_VariableUse_ref(ctx.getRef(), null);
		}
		return null;
	}*/
	
}
