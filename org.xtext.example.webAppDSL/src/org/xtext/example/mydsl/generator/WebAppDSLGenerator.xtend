/*
 * generated by Xtext
 */
package org.xtext.example.mydsl.generator


import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess




import org.xtext.example.mydsl.webAppDSL.VariableDeclaration

import org.xtext.example.mydsl.webAppDSL.Expression

import org.xtext.example.mydsl.webAppDSL.TextValue
import org.xtext.example.mydsl.webAppDSL.ComponentValue
import org.xtext.example.mydsl.webAppDSL.FunctionValue
import org.xtext.example.mydsl.webAppDSL.Block
import org.xtext.example.mydsl.webAppDSL.AssignmentOperation
import org.xtext.example.mydsl.webAppDSL.VariableUse
import org.xtext.example.mydsl.webAppDSL.Member
import org.xtext.example.mydsl.webAppDSL.View
import org.xtext.example.mydsl.webAppDSL.ParentReference
import org.xtext.example.mydsl.webAppDSL.OperationCall
import org.xtext.example.mydsl.webAppDSL.NumberValue
import org.xtext.example.mydsl.webAppDSL.IfStatement
import org.xtext.example.mydsl.webAppDSL.ForLoopStatement
import org.xtext.example.mydsl.webAppDSL.ArrayValue
import org.xtext.example.mydsl.webAppDSL.JavaExpression
import org.xtext.example.mydsl.webAppDSL.BooleanValue

class WebAppDSLGenerator implements IGenerator {
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		var head = resource.contents.head as View;
		fsa.generateFile(head.name + ".java", head.compile);
	}
	
	def compile(View v) '''
		«(v.viewBlock as Block).compile»
	'''
	def compile(Block block) '''
		«FOR statement : block.statements»
			//«statement.eClass.name»
			«IF statement.eClass.name == "AssignmentOperation"»
				«(statement as AssignmentOperation).compile»;
			«ENDIF»
			«IF statement.eClass.name == "VariableDeclaration"»
				«(statement as VariableDeclaration).compile»;
			«ENDIF»
			«IF statement.eClass.name == "VariableUse"»
				«(statement as VariableUse).compile»;
			«ENDIF»
			«IF statement.eClass.name == "IfStatement"»
				«(statement as IfStatement).compile»
			«ENDIF»
			«IF statement.eClass.name == "ForLoopStatement"»
				«(statement as ForLoopStatement).compile»
			«ENDIF»
			«IF statement.eClass.name == "JavaExpression"»
				«(statement as JavaExpression).compile»
			«ENDIF»
		«ENDFOR»
	'''


	def compile(IfStatement ifStatement) '''
		if(«ifStatement.condition.compile») {
			«ifStatement.consequent.compile»
		}
		«IF ifStatement.alternative != null»
			else {
				«ifStatement.alternative.compile»
			}
		«ENDIF»
	'''

	def compile(ForLoopStatement forLoopStatement) '''
		//a loop initialized by «forLoopStatement.initialization.eClass.name»
		«IF forLoopStatement.initialization.eClass.name == "AssignmentOperation"»
			for(«(forLoopStatement.initialization as AssignmentOperation).compile»;«forLoopStatement.condition.compile»;«(forLoopStatement.afterthought as AssignmentOperation).compile») {
				«forLoopStatement.loopBlock.compile»
			}
		«ENDIF»
		«IF forLoopStatement.initialization.eClass.name == "VariableDeclaration"»
			for(«(forLoopStatement.initialization as VariableDeclaration).compile»;«forLoopStatement.condition.compile»;«(forLoopStatement.afterthought as AssignmentOperation).compile») {
				«forLoopStatement.loopBlock.compile»
			}
		«ENDIF»
	'''



	def compile(AssignmentOperation op) '''
			«(op.owner as VariableUse).compileAssignmentVariableUseLeft(op)»'''
	
	def compile(VariableDeclaration variableDeclaration) {
			var modifier = "";
			//All properties under a component should be visible outside the component
			if (variableDeclaration.eContainer.eClass.name == "ComponentValue")
				modifier = "public";
			switch (variableDeclaration.variableType.eClass.name) {
				
				case "StringType":
					'''«modifier» String «variableDeclaration.name»«IF variableDeclaration.value != null» = «variableDeclaration.value.compile»«ENDIF»'''
				case "IntType":
					'''«modifier» int «variableDeclaration.name»«IF variableDeclaration.value != null» = «variableDeclaration.value.compile»«ENDIF»'''
				case "ComponentType":
					'''
					«componentClass(variableDeclaration)»
					«modifier» «variableDeclaration.name.toFirstUpper» «variableDeclaration.name»«IF modifier == ""» = new «variableDeclaration.name.toFirstUpper»()«ENDIF»'''
				case "FunctionType":
					'''
					«IF (variableDeclaration.component == null)»
						«modifier» void «variableDeclaration.name»(
						«FOR argument : (variableDeclaration.value as FunctionValue).arguments»
							«IF ((variableDeclaration.value as FunctionValue).arguments.indexOf(argument) != 0)»,«ENDIF»final «argument.compile»
						«ENDFOR»
						) {
							«(variableDeclaration.value as FunctionValue).functionBlock.compile»
						}
					«ENDIF»'''
				case "ArrayType":
					'''«modifier» Object[] «variableDeclaration.name» «IF variableDeclaration.value != null» = «variableDeclaration.value.compile»«ENDIF»'''
				default:
					"//Error: Unknown type " + variableDeclaration.variableType.eClass.name
			}
	}


	def implementsFieldEvents(String type) {
		if (type == "Button" || type == "TextField" || type == "NumberField" || type == "EmailField" || type == "OptionGroup") {
			return true;
		}
		return false;
	}

	def componentClass(VariableDeclaration variableDeclaration) {
		val isRoot = (variableDeclaration.eContainer.eClass.name == "Block");
		val alreadyAttachedToParent = (variableDeclaration.component != null);
		var parentType = "";
		var parentVaadinType = "";
		if (!isRoot) {
			parentVaadinType = (variableDeclaration.eContainer as ComponentValue).type;
			parentType = (variableDeclaration.eContainer.eContainer as VariableDeclaration).name.toFirstUpper;
		}
		
		val thisComponent = (variableDeclaration.value as ComponentValue);
	
		'''
		class «variableDeclaration.name.toFirstUpper» extends «thisComponent.type»«IF implementsFieldEvents(thisComponent.type)» implements FieldEvents«ENDIF» {
			«IF !isRoot»
				public «parentType» parent;
			«ENDIF»
			«FOR variableDeclaration2 : thisComponent.declarations»
				«IF variableDeclaration2.component == null»
					«variableDeclaration2.compile»;
				«ENDIF»
				«IF (variableDeclaration2.component != null && variableDeclaration2.variableType.eClass.name == "ComponentType")»
					//Children that are declared with the component-name-keyword
					//These are not assigned as normal children. Instead they are set by special methods in the parent component
					«componentClass(variableDeclaration2)»
					public «variableDeclaration2.name.toFirstUpper» «variableDeclaration2.name» = new «variableDeclaration2.name.toFirstUpper»(null);
				«ENDIF»
			«ENDFOR»
			
			public void setIcon(String iconSource) {
				super.setIcon(new FileResource(new File(basepath + iconSource)));
			}
			
			//Add componentSpecific methods
			«IF thisComponent.type == "Table"»
				int _tableIndex = 1;
				int _columnIndex = 0;
				String[] columnHeaders = new String[«thisComponent.properties.size»];
				boolean headersAdded = false;
				public Object addItem(Object[] obj) {
					if (!headersAdded) {
						for (int columnCounter = 0; columnCounter < columnHeaders.length; columnCounter++) {
							this.addContainerProperty(columnHeaders[columnCounter], obj[columnCounter].getClass(),  null);
						}
						headersAdded = true;
					}
					return super.addItem(obj, _tableIndex++);
				}
				
				public String getSelected(String name) {
					return (String)this.getItem(this.getValue()).getItemProperty(name).toString();
				}
			«ENDIF»
			
			«IF isRoot»
				public «variableDeclaration.name.toFirstUpper»() {
			«ELSE»
				public «variableDeclaration.name.toFirstUpper»(«parentType» parent_) {
					parent = parent_;
			«ENDIF»
				//Component properties
				this.setImmediate(true);
				this.setWidth("-1px");
				this.setHeight("-1px");

				//Set initial properties for component
				«IF (parentVaadinType == "AbsoluteLayout")»
					//This is set because parent is of type AbsoluteLayout
					String top = "0px";
					String left = "0px";
				«ELSEIF (parentVaadinType == "TabBarView")»
					//This is set because parent is of type TabBarView
					String iconSource = "";
				«ENDIF»
				//Set component properties (as specified inside parenthesis in the component declaration)
				«FOR property : thisComponent.properties»
					«IF thisComponent.type == "Table"»
						columnHeaders[«thisComponent.properties.indexOf(property)»] = «property.compile»;
					«ELSEIF thisComponent.type == "OptionGroup"»
						addItem(«property.compile»);
					«ELSE»
						//The value «property» is not handled in this component of typ «thisComponent.type»
					«ENDIF»

				«ENDFOR»
		
				//Create child components
				«FOR variableDeclaration2 : thisComponent.declarations»
					«IF variableDeclaration2.value != null && variableDeclaration2.component == null»
						«IF variableDeclaration2.variableType.eClass.name == "ComponentType"»
							«variableDeclaration2.name» = new «variableDeclaration2.name.toFirstUpper»(this);
						«ENDIF»
					«ENDIF»
				«ENDFOR»
				
				//Set variables with the component-name-keyword
				«FOR variableDeclaration3 : thisComponent.declarations»
					«IF variableDeclaration3.component != null && variableDeclaration3.value != null && variableDeclaration3.variableType.eClass.name != "FunctionType" && variableDeclaration3.variableType.eClass.name != "ComponentType"»
						«IF (parentVaadinType == "AbsoluteLayout")»
							«IF variableDeclaration3.name == "top"»
								top = «variableDeclaration3.value.compile»;
							«ELSEIF variableDeclaration3.name == "left"»
								left = «variableDeclaration3.value.compile»;
							«ELSE»
								this.set«variableDeclaration3.name.toFirstUpper»(«variableDeclaration3.value.compile»);
							«ENDIF»
						«ELSEIF (parentVaadinType == "TabBarView")»
							«IF variableDeclaration3.name == "icon"»
								iconSource = «variableDeclaration3.value.compile»;
							«ELSE»
								this.set«variableDeclaration3.name.toFirstUpper»(«variableDeclaration3.value.compile»);
							«ENDIF»
						«ELSE»
							this.set«variableDeclaration3.name.toFirstUpper»(«variableDeclaration3.value.compile»);
						«ENDIF»
					«ENDIF»
					«IF variableDeclaration3.component != null && variableDeclaration3.value != null && variableDeclaration3.variableType.eClass.name == "ComponentType"»
						this.set«variableDeclaration3.name.toFirstUpper»(«variableDeclaration3.name»);
					«ENDIF»
				«ENDFOR»
				
				//Assigns event listeners
				@SuppressWarnings("unused")	
				final «variableDeclaration.name.toFirstUpper» that = this;
				«FOR variableDeclaration4 : thisComponent.declarations»
					«IF variableDeclaration4.variableType.eClass.name == "FunctionType"»
						«FOR event : (variableDeclaration4.value as FunctionValue).events»
							«IF event == "init"»
								that.«variableDeclaration4.name»();
							«ELSE»
								this.add«event.toFirstUpper»Listener(new «event.toFirstUpper»Listener() {
									«IF thisComponent.type == "Button"»
										«IF event == "click" || event == "buttonClick"»
											public void buttonClick(ClickEvent event) {
										«ELSE»
											public void «event»(«event.toFirstUpper»Event event) {
										«ENDIF»
									«ELSEIF thisComponent.type == "Table"»
										«IF event == "click" || event == "itemClick"»
											public void itemClick(ItemClickEvent event) {
												that.select(event.getItemId());
										«ELSE»
											public void «event»(«event.toFirstUpper»Event event) {
										«ENDIF»
									«ELSEIF thisComponent.type == "Switch" || thisComponent.type == "TextField" || thisComponent.type == "NumberField" || thisComponent.type == "EmailField" || thisComponent.type == "OptionGroup"»
										«IF event == "valueChange" || event == "change"»
											public void valueChange(com.vaadin.data.Property.ValueChangeEvent event) {
										«ELSE»
											public void «event»(«event.toFirstUpper»Event event) {
										«ENDIF»
									«ELSE»
										public void «event»(«event.toFirstUpper»Event event) {
									«ENDIF»
										that.«variableDeclaration4.name»();
									}
								});
							«ENDIF»
						«ENDFOR»
					«ENDIF»
				«ENDFOR»
				«IF !isRoot && !alreadyAttachedToParent»
					//Adds the component to its container
					«IF parentVaadinType == "AbsoluteLayout"»
						parent.addComponent(this, "top: " + top + ";left: " + left + ";");
					«ELSEIF parentVaadinType == "TabBarView"»
						if (iconSource != "") {
							parent.addTab(this, this.getCaption(), new FileResource(new File(basepath + iconSource)));
						}
						else {
							parent.addTab(this, this.getCaption());
						}
					«ELSEIF parentVaadinType == "VerticalLayout" || parentVaadinType == "HorizontalLayout" || parentVaadinType == "VerticalComponentGroup" || parentVaadinType == "CssLayout"»
						parent.addComponent(this);
					«ELSEIF parentVaadinType == "Popover"»
						parent.setContent(this);
					«ELSE»
						//Error: Cannot add this component to its parent of type «parentVaadinType»
					«ENDIF»
				«ENDIF»
			}
		}
		//«variableDeclaration.name.toFirstUpper» «variableDeclaration.name»;
	'''}
	
	
	def compileAssignmentVariableUseLeft(VariableUse varUse, AssignmentOperation op) {
		if(varUse.ref.component != null && varUse.rgt != null) {
			return "get" + varUse.ref.name.toFirstUpper + "()." + varUse.rgt.compileAssignmentVariableUseLeft(op)
		}
		if(varUse.ref.component != null && varUse.rgt == null) {
			//For now the value is always cast to a String. May have to be changed later to cover other cases.
			return "set" + varUse.ref.name.toFirstUpper + "(((String)" + op.right.compile + "))"
		}
		if(varUse.ref.component == null && varUse.rgt != null) {
			var type = varUse.ref.variableType.eClass.name;
			var realType = "";
			switch (type) {
				case "IntType":
					realType = "Integer"
				case "StringType":
					realType = "String"
				case "ComponentType":
					realType = varUse.ref.name.toFirstUpper
			}
			return varUse.ref.name + "." + varUse.rgt.compileAssignmentVariableUseLeft(op)
		}
		if(varUse.ref.component == null && varUse.rgt == null) {
			return varUse.ref.name + " = " + op.right.compile
		}

	}
	
	
	def compileAssignmentVariableUseLeft2(VariableUse varUse, AssignmentOperation op) '''
		«IF varUse.ref.component != null && varUse.rgt != null»get«varUse.ref.name.toFirstUpper»().«varUse.rgt.compileAssignmentVariableUseLeft(op)»«ENDIF»
		«IF varUse.ref.component != null && varUse.rgt == null»set«varUse.ref.name.toFirstUpper»(«op.right.compile»)«ENDIF»
		
		«IF varUse.ref.component == null && varUse.rgt != null»«varUse.ref.name».«varUse.rgt.compileAssignmentVariableUseLeft(op)»«ENDIF»
		«IF varUse.ref.component == null && varUse.rgt == null»«varUse.ref.name» = «op.right.compile»«ENDIF»
	'''
	def compileAssignmentVariableUseLeft(Member m, AssignmentOperation op)
		'''«m.member.compileAssignmentVariableUseLeft(op)»'''
	
	
	def compileParameters(VariableUse varUse)
	'''«FOR parameter : varUse.functionCall.parameters»«IF (varUse.functionCall.parameters.indexOf(parameter) != 0)»,«ENDIF»«parameter.compile»«ENDFOR»'''
	
	def getJavaType(VariableUse varUse) {
		var type = varUse.ref.variableType.eClass.name;
		var realType = "";
		switch (type) {
			case "IntType":
				realType = "Integer"
			case "StringType":
				realType = "String"
			case "BoolType":
				realType = "Boolean"
			case "ComponentType":
				realType = varUse.ref.name.toFirstUpper
		}
		return realType;
	}
	
	def compile(VariableUse varUse) {
		var type = varUse.ref.variableType.eClass.name;
		var realType = "";
		switch (type) {
			case "IntType":
				realType = "Integer"
			case "StringType":
				realType = "String"
			case "BoolType":
				realType = "Boolean"
			case "ComponentType":
				realType = varUse.ref.name.toFirstUpper
				
			
		}
//		if (type == "ComponentType")
//			type = (varUse.ref as ComponentClass).
		
		if (varUse.ref.variableType.eClass.name == "FunctionType") {
			//FunctionCall
			if (varUse.ref.component != null)
				if (varUse.functionCall != null)
					return varUse.ref.name + "(" + ( compileParameters(varUse) ) +")"
				else
					return varUse.ref.name + "()"
			else
				if (varUse.functionCall != null)
					return varUse.ref.name + "(" + ( compileParameters(varUse) ) +")"
				else
					return varUse.ref.name + "()"
		}
		else {
			if (varUse.ref.component != null && varUse.rgt != null && type != "ComponentType") {
				var value = "get" + varUse.ref.name.toFirstUpper +"()." + varUse.rgt.compile;
				if (varUse.rgt.member.ref.component != null) {
					return "((" + getJavaType(varUse.rgt.member) + ")" + value + ")";
				}
				return value;
			}
			if (varUse.ref.component != null && varUse.rgt == null && type != "ComponentType") {
				if (varUse.eContainer.eClass.name == "Member") {
					return "get" + varUse.ref.name.toFirstUpper +"()";
				}
				else {
					return "(" + getJavaType(varUse) + ")get" + varUse.ref.name.toFirstUpper +"()";
				}
			}
			
			if ((varUse.ref.component == null || type == "ComponentType") && varUse.rgt != null) {
				var value = varUse.ref.name + "." + varUse.rgt.compile;
				if (varUse.rgt.member.ref.component != null && varUse.rgt.member.ref.variableType.eClass.name != "FunctionType") {
					//return "((" + getJavaType(varUse.rgt.member) + ")" + value + ")";
					return value;
				}
				else {
					return value;
				}
				
			}
			if ((varUse.ref.component == null || type == "ComponentType") && varUse.rgt == null) {
				return varUse.ref.name
			}	
		}
			
	}
	

	
	def compile(Member m)
		'''«m.member.compile»'''

	def compileArrayValue(ArrayValue array) '''
		new Object[] {
			«FOR value : array.values»«IF (array.values.indexOf(value) != 0)», «ENDIF»«value.compile»«ENDFOR»
		}'''

	def compile(Expression expression) {
		switch (expression.eClass.name) {
			case "JavaExpression":
				(expression as JavaExpression).eval.text
			case "TextValue":
				//Strings are automatically escaped. In this case they shouldn't be so extra slashes need to be added
				"\"" + (expression as TextValue).text.toString.replaceAll("\\\"", "\\\\\\\"") + "\""
			case "VariableUse":
				(expression as VariableUse).compile
			case "NumberValue":
				(expression as NumberValue).number.toString
			case "ArrayValue":
				compileArrayValue(expression as ArrayValue)
			case "OperationCall":
				(expression as OperationCall).owner.compile + (expression as OperationCall).op + (expression as OperationCall).right.compile
			case "BooleanValue":
				(expression as BooleanValue).value
			case "NullValue":
				"null"
			default:
				"//Expressions of type " + expression.eClass.name + " are not handled"
		}
	}
	
	


}